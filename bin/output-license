#!/usr/bin/env node

var path = require('path'),
    fs = require('fs'),
    csv = require('to-csv'),
    nopt = require('nopt'),
    help = require('help')(path.join(__dirname, 'help.txt'));
var findLicense = require('../output-license.js');
var dir, refJson;
var knownOpts = {
        "help": Boolean,
        "dir": path,
        "ref-json": [path],
        "save": path
    },
    shortHands = {
        "h": ["--help"],
        "d": ["--dir"],
        "r": ["--ref-json"],
        "s": ["--save"]
    },
    args = nopt(knownOpts, shortHands, process.argv, 2);

if (process.argv.length === 2 || args['help']) {
    return help();
}

if (process.argv.length === 3 && args.argv['remain'].length === 1) {
    console.log("no --dir option was used, but considering " + args.argv['remain'] + " as a location");
    args['dir'] = args.argv['remain'].shift();
}

if (args.argv['remain'].length > 0) {
    console.warn("Please check the command options.\n");
    return help();
}

dir = args['dir'] || path.join(__dirname, '../node_modules');
dir = path.resolve(dir);

if (args['ref-json']) {
    try {
        refJson = JSON.parse(fs.readFileSync(path.resolve(args['ref-json'])));
        console.log("Reference JSON license file: " + args['ref-json']);
    } catch(e) {
        console.warn("Exception occurs on parsing " + args['ref-json']);
        console.warn("Error:", e);
    };
}

var options = {
    dir: dir,
    refJson: refJson
};

function finish(data) {
    if (args.hasOwnProperty('save') && data.hasOwnProperty('moduleInfos')) {
        var save = [];
        data['moduleInfos'].forEach( function(info) {
            var repo;
            if (info.detail['repository']) {
                if (info.detail['repository']['url']) {
                    repo = info.detail['repository']['url'];
                } else if (typeof info.detail['repository']) {
                    repo = info.detail['repository'];
                }
                if ( (idx = repo.indexOf('github.com')) !== -1) {
                    repo = 'https://' + repo.slice(idx, repo.length-4);
                }
            } else if (info.detail['homepage']) {
                repo = info.detail['homepage'];
            }
            save.push({
                name: info.name,
                version: info.version,
                license: info.license,
                location: path.dirname(info.pkgFile),
                repository: repo
            });
        });

        var wFilePath = args['save'] || 'noname';
        wFilePath = path.resolve(wFilePath);
        if (path.extname(wFilePath) == '') {
            wFilePath = wFilePath.concat('.csv');
        }
        fs.writeFileSync(wFilePath, csv(save));
        console.log('Saving data to the ' + wFilePath);
    }
    return;
}

findLicense(options, finish);
